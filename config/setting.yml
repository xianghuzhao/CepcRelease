bsm:
#  require: '>=0.4,<1.0'
  require: '==0.4.*'

category:
  not_used: {}
  system:
    pre_check: true
  external:
    install: true
    auto_env: true
    version_dir: true
    root: '{software_root}/{platform}/external'
  cepcsoft:
    install: true
    auto_env: true
    version_dir: true
    root: '{software_root}/{platform}/cepcsoft/{version}'
  data:
    install: true
    auto_env: true
    version_dir: true
    root: '{software_root}/data'
  work:
    auto_env: true
    shared: true
    root: 'WORK_ROOT'
  work_ver:
    auto_env: true
    shared: true
    version_dir: true
    root: 'WORK_VERSION_ROOT'
  standby:
    auto_env: false
    version_dir: true
    root: '{software_root}/{platform}/standby'

category_priority: [work, cepcsoft, external, data, standby]

install:
  steps:
    - download
    - extract
    - patch
    - pre_build
    - configure
    - compile
    - install
    - post_build
    - clean
  atomic_start: pre_build
  atomic_end: post_build
  options_to_save:
    - python
    - ruby

env:
  set_env:
    CEPCSOFT: '{software_root}/{platform}/cepcsoft/{version}'
    CEPCSOFT_EXTERNAL: '{software_root}/{platform}/external'
    CEPCSOFT_DATA: '{software_root}/data'
    CEPCSOFT_VERSION: '{version}'
    CEPCSOFT_PLATFORM: '{platform}'
  append_path:
    BSM_APP_VERSION_PATH: ['cepcenv/{version}']
  unset_env:
    - MARLIN_DLL
  alias:
    hehe: 'hehe xixi lala'
  unalias:
    - hehe

#package_path:
#  full_list:
#    home: '{package}_root_dir'
#    src: '{package}_src_dir'
#    bin: '{package}_bin_dir'
#    lib: '{package}_lib_dir'
#    inc: '{package}_inc_dir'
package_path_list:
  name: '{package}_{path}_dir'

prepend_package_path:
  PATH: bin
  LD_LIBRARY_PATH: lib
  MANPATH: man
  INFOPATH: info
  PKG_CONFIG_PATH: pkgconfig
  CMAKE_PREFIX_PATH: cmake
  PYTHONPATH: python
  MARLIN_DLL: marlin
#  solo_env:
#    home: '{package}_HOME'
#    src: '{package}_SOURCE'
#    bin: '{package}_BIN'
#    lib: '{package}_LIB'
#    inc: '{package}_INCLUDE'

handler:
  # This can also be set in package config
  auto_build: auto_cmake
